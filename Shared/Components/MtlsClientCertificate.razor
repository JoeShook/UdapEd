@using UdapEd.Shared.Services
@inject IMutualTlsService mTlsService
@inject IDialogService DialogService

<InputFile id="clientCertInput" OnChange="UploadClientFilesAsync" hidden />

<MudCard Class="pa-2 ma-2" Elevation="3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6" Color="Color.Primary">Load mTLS Client</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>Then client certificate is used to login to mTLS secured FHIR servers</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudFab Class="ma-2"
                HtmlTag="label"
                Size="Size.Small"
                Color="@CertLoadedColor"
                StartIcon="@AppState.CertificateIcon"
                Label="Upload a Client Certificate"
                Title="Upload Client Certificate"
                IconSize="Size.Small"
                for="clientCertInput" />
        <MudFab HtmlTag="label"
                Class="ma-2"
                Size="Size.Small"
                Color="@CertLoadedColor"
                StartIcon="@AppState.CertificateIcon"
                Label="FhirLabs mTLS Client Certificate"
                Title="Use Test Client Certificate"
                IconSize="Size.Small"
                OnClick="@LoadFhirLabsTestCertificate" />
    </MudCardActions>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(AppState.MtlsClientCertificateInfo?.DistinguishedName) ||
             !string.IsNullOrEmpty(AppState.MtlsClientCertificateInfo?.Thumbprint))
        {
            <MudText Typo="Typo.body2"><b>Subject:</b>@AppState.MtlsClientCertificateInfo?.DistinguishedName</MudText>
            <MudText Typo="Typo.caption"> <b>Thumbprint (sha1)</b> </MudText>
            <MudText Typo="Typo.body2">@AppState.MtlsClientCertificateInfo?.Thumbprint </MudText>
            <MudText Typo="Typo.body2"><b>Issuer:</b> @AppState.MtlsClientCertificateInfo?.Issuer </MudText>


            @if (AppState.MtlsClientCertificateInfo.CertLoaded == CertLoadedEnum.Expired)
            {
                <MudAlert Severity="Severity.Error">Certificate Expired</MudAlert>
            }
        }

    </MudCardContent>
</MudCard>

@code {

    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    

    public Color CertLoadedColor { get; set; } = Color.Error;
    
    protected override async Task OnInitializedAsync()
    {
        var clientCertificateLoadStatus = await mTlsService.ClientCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), clientCertificateLoadStatus);
        await SetClientCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
    }

    private async Task SetClientCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
        }

        this.StateHasChanged();
    }

    private async Task UploadClientFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await mTlsService.UploadClientCertificate(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certViewModel = await mTlsService.ValidateCertificate(result.Data?.ToString() ?? "");
        await SetClientCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }

    private async Task LoadFhirLabsTestCertificate()
    {
        var certViewModel = await mTlsService.LoadTestCertificate("FhirLabs_mTLS_Client.pfx");
        await SetClientCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }

}
