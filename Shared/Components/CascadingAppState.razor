@using Udap.Model.Registration
@using System.Collections.Specialized
@using UdapEd.Shared.Model.AuthExtObjects
@using UdapEd.Shared.Model.Discovery
@using UdapEd.Shared.Model.Smart;
@using UdapEd.Shared.Services.Fhir

@implements UdapEd.Shared.Services.IAppState
@inject ILocalStorageService LocalStorageService
@inject HttpClient Http

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private List<string> _certDefaultBaseUrls = new List<string>();
    private List<string> _idPBaseUrls  = new List<string>();

    private string _caller = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUrlsFromConfiguration();
    }


    private async Task LoadUrlsFromConfiguration()
    {
        try
        {
            // var json = await Http.GetStringAsync("wwwroot/Packages/udap_urls.json");

#if ANDROID || IOS || MACCATALYST || WINDOWS
        // For .NET MAUI
        using var stream = await FileSystem.OpenAppPackageFileAsync("udap_urls.json");
        using var reader = new StreamReader(stream);
        var json = await reader.ReadToEndAsync();
#else
            // For Blazor WebAssembly
            // var json = await Http.GetStringAsync("_content/UdapEd.Shared/Packages/udap_urls.json");  This is statically compiled in
            var json = await Http.GetStringAsync("Packages/udap_urls.json"); // this can be dynamic and replaced, like in a Docker Container.
#endif

            var config = JsonSerializer.Deserialize<UrlConfig>(json);

            if (config != null)
            {
                _certDefaultBaseUrls = config.CertDefaultBaseUrls;
                _idPBaseUrls = config.IdPBaseUrls;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading configuration: {ex.Message}");
        }
    }

    private class UrlConfig
    {
        public List<string> CertDefaultBaseUrls { get; set; } = new();
        public List<string> IdPBaseUrls { get; set; } = new();
    }

    public void SetProperty(
        ComponentBase caller,
        string propertyName,
        object? propertyValue, 
        bool saveChanges = true,
        bool fhirStateHasChanged = true)
    {
        try
        {
            var prop = this.GetType().GetProperty(propertyName);
            if (prop != null)
            {
                this._caller = caller.GetType().Name;
                prop.SetValue(this, propertyValue);
                if (saveChanges)
                {
                    // Console.WriteLine($"SaveChanges for propertyName: {propertyName}");
                    this.SaveChanges(); //WASM:: Cannot .GetAwaiter().GetResult() will not work.  Error: "Cannot wait on monitors on this runtime
                }
                if (fhirStateHasChanged)
                {
                    // Console.WriteLine($"Fire StateHasChanged for propertyName: {propertyName}");
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine($"$Failed to set property: {propertyName}");
        }
    }

    public async Task SetPropertyAsync(
        ComponentBase caller,
        string propertyName,
        object? propertyValue, 
        bool saveChanges = true,
        bool fhirStateHasChanged = true)
    {
        try
        {
            var prop = this.GetType().GetProperty(propertyName);
            if (prop != null)
            {
                this._caller = caller.GetType().Name;
                prop.SetValue(this, propertyValue);
                if (saveChanges)
                {
                    // Console.WriteLine($"SaveChanges(Async) for propertyName: {propertyName}");
                    await SaveChanges();
                }
                if (fhirStateHasChanged)
                {
                    // Console.WriteLine($"Fire StateHasChanged(Async) for propertyName: {propertyName}");
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine($"$Failed to set property: {propertyName}");
        }
    }

    private string? _baseUrl;

    public string? BaseUrl
    {
        get => _baseUrl;
        private set
        {
            _baseUrl = value;
            if (_caller == "Toolbar")
            {
                // The Toolbar component changed the AppState Message property
            }
        }
    }

    public string Community { get; private set; }

    private OrderedDictionary? _baseUrls;

    public OrderedDictionary? BaseUrls
    {
        get
        {
            if (_baseUrls == null || !(_baseUrls.Count > 0))
            {
                _baseUrls = new OrderedDictionary();
                foreach (var certDefaultBaseUrL in _certDefaultBaseUrls)
                {
                    _baseUrls.Add(certDefaultBaseUrL, null);
                }
            }

            return _baseUrls;
        }
        set => _baseUrls = value;
    }

    private OrderedDictionary? _idPDictionary;

    public OrderedDictionary? IdPDictionary
    {
        get
        {
            if (_idPDictionary == null || !(_idPDictionary.Count > 0))
            {
                _idPDictionary = new OrderedDictionary();
                foreach (var idPBaseUrL in _idPBaseUrls)
                {
                    _idPDictionary.Add(idPBaseUrL, idPBaseUrL);
                }
            }

            return _idPDictionary;
        }
        set => _idPDictionary = value;
    }

    private ClientStatus _status = new ClientStatus(false, "Missing");

    public MetadataVerificationModel? MetadataVerificationModel { get; private set; }

    public RawSoftwareStatementAndHeader? SoftwareStatementBeforeEncoding { get; private set; }

    public RawSoftwareStatementAndHeader? CertSoftwareStatementBeforeEncoding { get; private set; }

    public UdapRegisterRequest? UdapRegistrationRequest { get; private set; }

    public Oauth2FlowEnum Oauth2Flow { get; private set; }

    public RegistrationDocument? RegistrationDocument { get; private set; }

    public UdapClientCredentialsTokenRequestModel? ClientCredentialsTokenRequest { get; private set; }

    public UdapAuthorizationCodeTokenRequestModel? AuthorizationCodeTokenRequest { get; private set; }

    public AccessCodeRequestResult? AccessCodeRequestResult { get; private set; }

    public LoginCallBackResult? LoginCallBackResult { get; private set; }

    public SmartSession? SmartSession { get; private set; }

    public TokenResponseModel? AccessTokens { get; private set; }

    public ClientSecureMode ClientMode { get; private set; }

    public LaunchContext? LaunchContext { get; private set; }

    public ClientStatus Status
    {
        get
        {
            if (AccessTokens == null)
            {
                return new ClientStatus(false, "Missing");
            }

            if (AccessTokens.IsError)
            {
                return new ClientStatus(false, "Error");
            }

            if (DateTime.UtcNow >= AccessTokens.ExpiresAt)
            {
                return new ClientStatus (false, "Expired");
            }

            var tokensList = new List<string>();

            if (!string.IsNullOrEmpty(AccessTokens.AccessToken))
            {
                tokensList.Add("Access");
            }
            if (!string.IsNullOrEmpty(AccessTokens.IdentityToken))
            {
                tokensList.Add("Identity");
            }
            if (!string.IsNullOrEmpty(AccessTokens.RefreshToken))
            {
                tokensList.Add("Refresh");
            }

            var statusMessage = string.Join(" | ", tokensList);

            return new ClientStatus(true, statusMessage);
        }

        private set
        {
            _status = value;
            if (_caller == "udapBusinessToBusiness")
            {
                //example of potential logic
            }
        }
    }

    /// <summary>
    /// Is the client cert loaded with private key?
    /// </summary>
    public bool CertificateLoaded { get; set; }

    /// <summary>
    /// Is the certification cert loaded with private key?
    /// </summary>
    public bool CertificationCertLoaded { get; set; }

    /// <summary>
    /// Is an anchor loaded to validated trust to a resource servers software statement
    /// </summary>
    public bool AnchorLoaded { get; set; }

    public CertificateStatusViewModel? UdapClientCertificateInfo { get; private set; }

    public CertificateStatusViewModel? CertificationAndEndorsementInfo { get; private set; }

    public CertificateStatusViewModel? UdapAnchorCertificateInfo { get; private set; }

    public CertificateStatusViewModel? MtlsClientCertificateInfo { get; private set; }

    public CertificateStatusViewModel? MtlsAnchorCertificateInfo { get; private set; }

    public AuthorizationCodeRequest? AuthorizationCodeRequest { get; private set; }


    public Pkce Pkce { get; private set; } = new();

    private ClientRegistrations? _clientRegistrations;

    public ClientRegistrations ClientRegistrations
    {
        get { return _clientRegistrations ??= new ClientRegistrations(); } 
        private set => _clientRegistrations = value;
    }

    private ClientHeaders? _cliientHeaders;

    public ClientHeaders? ClientHeaders
    {
        get { return _cliientHeaders ??= new ClientHeaders(); }
        private set => _cliientHeaders = value;
    }

    private PatientSearchPref? _patientSearchPref;

    public PatientSearchPref PatientSearchPref
    {
        get { return _patientSearchPref ??= new PatientSearchPref(); }
        private set => _patientSearchPref = value;
    }

    private Dictionary<string, AuthExtModel> _authExtObjeTemplateSelected;

    public Dictionary<string, AuthExtModel> AuthorizationExtObjects
    {
        get { return _authExtObjeTemplateSelected ??= new Dictionary<string, AuthExtModel>(); }
        private set => _authExtObjeTemplateSelected = value;
    }

    private FhirContext? _fhirContext;

    public FhirContext FhirContext
    {
        get { return _fhirContext ??= new FhirContext(); }
        private set => _fhirContext = value;
    }



    /// <summary>
    /// Certificate from Material Design Icons
    /// </summary>
    public string CertificateIcon = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">" +
                                    "<path fill=\"currentColor\" d=\"M13 21L15 20L17 21V14H13M17 9V7L15 8L13 7V9L11 10L13 11V13L15 12L17 13V11L19 10M20 3H4A2 2 0 0 0 2 5V15A2 2 0 0 0 4 17H11V15H4V5H20V15H19V17H20A2 2 0 0 0 22 15V5A2 2 0 0 0 20 3M11 8H5V6H11M9 11H5V9H9M11 14H5V12H11Z\" />" +
                                    "</svg>";

    


    private const string UdapStateKeyName = "udapClientState";
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // do this only once
        {
            // Get the JSON data
            var json = await LocalStorageService.GetItemAsStringAsync(UdapStateKeyName);
            if (!string.IsNullOrEmpty(json))
            {
                var options = new JsonSerializerOptions
                {
                    Converters = { new FhirContextJsonConverter() }
                };
                var appStateData = JsonSerializer.Deserialize<UdapClientState>(json, options);

                var properties = appStateData?.GetType().GetProperties();
                if (properties != null)
                {
                    foreach (var property in properties)
                    {
                        var type = property.PropertyType;
                        var value = property.GetValue(appStateData);
                        SetProperty(this, property.Name, value, false);
                    }
                    // Re-render
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public async Task SaveChanges()
    {
        // LocalStorage allows up to 5MB by default.
        // Test: https://arty.name/localstorage.html
        // TIP: Never store sensitive data in LocalStorage

        var appState = (IAppState)this;
        var options = new JsonSerializerOptions
        {
            Converters = { new FhirContextJsonConverter() }
        };
        var json = JsonSerializer.Serialize(appState, options);
        await LocalStorageService.SetItemAsStringAsync(UdapStateKeyName, json);
    }
}