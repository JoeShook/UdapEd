@inherits ComponentBase
@inject IDiscoveryService DiscoveryService;
<InputFile id="anchorFileInput" OnChange="UploadFilesAsync" hidden />

<MudCard Class="pa-2 ma-2" Elevation="0">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText style="float: right">Choose Trust Anchor Certificate.</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardActions style="float: right">
        <MudStack Wrap="Wrap.Wrap" Row="true">
            <MudFab Class="ma-2 " style="float: right;"
                    HtmlTag="label"
                    Size="Size.Small"
                    Color="@AnchorLoadedColor"
                    StartIcon="@AppState.CertificateIcon"
                    Label="Upload"
                    Title="Upload Anchor Certificate"
                    IconSize="Size.Small"
                    for="anchorFileInput"/>
                
            <MudFab Class="ma-2 " Style="float: right; white-space: nowrap;"
                    HtmlTag="label"
                    Size="Size.Small"
                    Color="@FhirLabsAnchorLoadedColor"
                    StartIcon="@AppState.CertificateIcon"
                    Label="Load FhirLabs Test CA"
                    IconSize="Size.Small"
                    OnClick="@LoadFhirLabsAnchor" />

            <MudFab Class="ma-2 " Style="float: right; white-space: nowrap;"
                    HtmlTag="label"
                    Size="Size.Small"
                    Color="@EmrDirectAnchorLoadedColor"
                    StartIcon="@AppState.CertificateIcon"
                    Label="Load EMR Direct Test CA"
                    IconSize="Size.Small"
                    OnClick="@LoadUdapOrgAnchor" />
        </MudStack>
    </MudCardActions>
    <MudCardContent style="float: left">
        @if (!string.IsNullOrEmpty(AppState.UdapAnchorCertificateInfo?.DistinguishedName) ||
             !string.IsNullOrEmpty(AppState.UdapAnchorCertificateInfo?.Thumbprint))
        {
            <MudItem xs="12">
                <MudText Typo="Typo.body2">@AppState.UdapAnchorCertificateInfo?.DistinguishedName</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudText  Typo="Typo.caption"> Thumbprint (sha1) </MudText>
                <MudText  Typo="Typo.body2">@AppState.UdapAnchorCertificateInfo?.Thumbprint </MudText>
            </MudItem>

        }
    </MudCardContent>
</MudCard>

@code {
    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    readonly PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(5));

    private bool _checkServerSession;


    public Color AnchorLoadedColor;
    public Color EmrDirectAnchorLoadedColor;
    public Color FhirLabsAnchorLoadedColor;


    protected override async Task OnInitializedAsync()
    {
        var userSuppliedCertificate = AppState.UdapAnchorCertificateInfo?.UserSuppliedCertificate;

        var anchorCertificateLoadStatus = await DiscoveryService.AnchorCertificateLoadStatus();

        if (anchorCertificateLoadStatus != null)
        {
            anchorCertificateLoadStatus.UserSuppliedCertificate = userSuppliedCertificate ?? false;
        }

        await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), anchorCertificateLoadStatus);

        if (anchorCertificateLoadStatus is { UserSuppliedCertificate: true })
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref AnchorLoadedColor);
        }
        else if (anchorCertificateLoadStatus != null && anchorCertificateLoadStatus.Issuer.StartsWith("EMR Direct Test CA"))
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref EmrDirectAnchorLoadedColor);
        }
        else if (anchorCertificateLoadStatus != null && anchorCertificateLoadStatus.Issuer.StartsWith("SureFhir-CA"))
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref FhirLabsAnchorLoadedColor);
        }


        if (Bq.Events != null)
        {
            //No background tasks in Maui.  FYI IOS doesn't allow it.
            RunTimer();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Bq.Events != null && firstRender)
        {
            Bq.Events.OnBlur += Events_OnBlur;
            Bq.Events.OnFocusAsync += Events_OnFocus;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Events_OnFocus(FocusEventArgs obj)
    {
        var anchorCertificateLoadStatus = await DiscoveryService.AnchorCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), anchorCertificateLoadStatus);


        if (anchorCertificateLoadStatus != null && anchorCertificateLoadStatus.Issuer.StartsWith("EMR Direct Test CA"))
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref EmrDirectAnchorLoadedColor);
        }
        else if (anchorCertificateLoadStatus is { UserSuppliedCertificate: true })
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref AnchorLoadedColor);
        }
        else if (anchorCertificateLoadStatus != null && anchorCertificateLoadStatus.Issuer.StartsWith("SureFhir-CA"))
        {
            SetCertLoadedColor(anchorCertificateLoadStatus.CertLoaded, ref FhirLabsAnchorLoadedColor);
        }

        _checkServerSession = true;
    }

    private void Events_OnBlur(FocusEventArgs obj)
    {
        _checkServerSession = false;
    }


    private async Task LoadFhirLabsAnchor()
    {
        var certViewModel = await DiscoveryService.LoadFhirLabsAnchor();
        SetCertLoadedColor(certViewModel?.CertLoaded, ref FhirLabsAnchorLoadedColor);
        await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), certViewModel);
    }

    private async Task LoadUdapOrgAnchor()
    {
        var certViewModel = await DiscoveryService.LoadUdapOrgAnchor();
        SetCertLoadedColor(certViewModel?.CertLoaded, ref EmrDirectAnchorLoadedColor);
        await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), certViewModel);
    }

    private void SetCertLoadedColor(CertLoadedEnum? isCertLoaded, ref Color anchorColor)
    {
        AnchorLoadedColor = Color.Default;
        EmrDirectAnchorLoadedColor = Color.Default;
        FhirLabsAnchorLoadedColor = Color.Default;

        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                anchorColor = Color.Error;
                AppState.SetProperty(this, nameof(AppState.AnchorLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                anchorColor = Color.Success;
                AppState.SetProperty(this, nameof(AppState.AnchorLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                anchorColor = Color.Warning;
                AppState.SetProperty(this, nameof(AppState.AnchorLoaded), false);
                break;
            default:
                anchorColor = Color.Error;
                AppState.SetProperty(this, nameof(AppState.AnchorLoaded), false);
                break;
        }

        this.StateHasChanged();
    }

    async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            if (_checkServerSession)
            {
                var certViewModel = await DiscoveryService.AnchorCertificateLoadStatus();
                await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), certViewModel);
                SetCertLoadedColor(certViewModel?.CertLoaded, ref AnchorLoadedColor);
            }
        }
    }

    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        var certViewModel = await DiscoveryService.UploadAnchorCertificate(Convert.ToBase64String(certBytes));
        await AppState.SetPropertyAsync(this, nameof(AppState.UdapAnchorCertificateInfo), certViewModel);
        SetCertLoadedColor(certViewModel?.CertLoaded, ref AnchorLoadedColor);
    }

    public void Dispose()
    {
        _periodicTimer.Dispose();
    }

}
