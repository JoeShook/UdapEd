@using UdapEd.Shared.Services
@implements IDisposable

<InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />


<MudFab Class="ma-2"
        HtmlTag="label"
        Size="Size.Small"
        Color="@CertLoadedColor"
        StartIcon="@AppState.CertificateIcon"
        Label="Upload a Certification Or Endorsement Certificate"
        IconSize="Size.Small"
        for="fileInput"/>

<MudFab HtmlTag="label"
        Class="ma-2"
        Size="Size.Small"
        Color="@CertLoadedColorForDefaultCommunity"
        StartIcon="@AppState.CertificateIcon"
        Label="FhirLabs Example Certification"
        IconSize="Size.Small"
        OnClick="@LoadFhirLabsExampleCertificatationCertificate"/>


@if (AppState.ClientMode == ClientSecureMode.UDAP && (
    !string.IsNullOrEmpty(AppState.CertificationAndEndorsementInfo?.DistinguishedName) ||
     !string.IsNullOrEmpty(AppState.CertificationAndEndorsementInfo?.Thumbprint)))
{   
        <MudText Typo="Typo.body2"><b>Subject:</b>@AppState.CertificationAndEndorsementInfo?.DistinguishedName</MudText>
        <MudText Typo="Typo.caption"> <b>Thumbprint (sha1)</b> </MudText>
        <MudText  Typo="Typo.body2">@AppState.CertificationAndEndorsementInfo?.Thumbprint </MudText>
        <MudText Typo="Typo.body2"><b>Issuer:</b> @AppState.CertificationAndEndorsementInfo?.Issuer </MudText>
       

    @if (AppState.CertificationAndEndorsementInfo.CertLoaded == CertLoadedEnum.Expired)
    {
        <MudAlert Severity="Severity.Error">Certificate Expired</MudAlert>
    }
}

@code {
    
    [Inject] ICertificationService CertificationService { get; set; } = null!;
    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;

    readonly PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(5));
    private bool _checkServerSession;

    protected override async Task OnInitializedAsync()
    {
        var userSuppliedCertificate = AppState.CertificationAndEndorsementInfo?.UserSuppliedCertificate;
        var clientCertificateLoadStatus = await CertificationService.ClientCertificateLoadStatus();

        if (clientCertificateLoadStatus != null)
        {
            clientCertificateLoadStatus.UserSuppliedCertificate = userSuppliedCertificate ?? false;
        }

        await AppState.SetPropertyAsync(this, nameof(AppState.CertificationAndEndorsementInfo), clientCertificateLoadStatus);
        
        if (clientCertificateLoadStatus is { UserSuppliedCertificate: true })
        {
            await SetCertLoadedColor(clientCertificateLoadStatus.CertLoaded);
        }
        else 
        {
            await SetCertLoadedColorFoExample(clientCertificateLoadStatus.CertLoaded);
        }
        
        
        if (Bq.Events != null)
        {
            //No background tasks in Maui.  FYI IOS doesn't allow it.
            RunTimer();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Bq.Events != null && firstRender)
        {
            Bq.Events.OnBlur += Events_OnBlur;
            Bq.Events.OnFocusAsync += Events_OnFocus;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Events_OnFocus(FocusEventArgs obj)
    {
        var userSuppliedCertificate = AppState.CertificationAndEndorsementInfo?.UserSuppliedCertificate;
        var clientCertificateLoadStatus = await CertificationService.ClientCertificateLoadStatus();

        if (clientCertificateLoadStatus != null)
        {
            clientCertificateLoadStatus.UserSuppliedCertificate = userSuppliedCertificate ?? false;
        }

        await AppState.SetPropertyAsync(this, nameof(AppState.CertificationAndEndorsementInfo), clientCertificateLoadStatus);
        
        if (clientCertificateLoadStatus is { UserSuppliedCertificate: true })
        {
            await SetCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
        }
        else 
        {
            await SetCertLoadedColorFoExample(clientCertificateLoadStatus?.CertLoaded);
        }
        
        _checkServerSession = true;
    }

    private void Events_OnBlur(FocusEventArgs obj)
    {
        _checkServerSession = false;
    }

    private async Task SetCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        CertLoadedColorForDefaultCommunity = Color.Default;

        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Default;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
        }

        this.StateHasChanged();
    }
    

    private async Task SetCertLoadedColorFoExample(CertLoadedEnum? isCertLoaded)
    {
        CertLoadedColor = Color.Default;

        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColorForDefaultCommunity = Color.Default;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColorForDefaultCommunity = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColorForDefaultCommunity = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                CertLoadedColorForDefaultCommunity = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
            default:
                CertLoadedColorForDefaultCommunity = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationCertLoaded), false);
                break;
        }

        this.StateHasChanged();
    }

    public Color CertLoadedColor { get; set; } = Color.Default;
    public Color CertLoadedColorForDefaultCommunity { get; set; } = Color.Default;


    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await CertificationService.UploadCertificate(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certViewModel = await CertificationService.ValidateCertificate(result.Data?.ToString() ?? "");
        await SetCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.CertificationAndEndorsementInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.UDAP);
        await OnCertificationCertLoaded.InvokeAsync();
    }

    private async Task LoadFhirLabsExampleCertificatationCertificate()
    {
        var certViewModel = await CertificationService.LoadTestCertificate("FhirLabsAdminCertification.pfx");
        await SetCertLoadedColorFoExample(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.CertificationAndEndorsementInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.UDAP);
        await OnCertificationCertLoaded.InvokeAsync();
    }

    
    async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            if (_checkServerSession)
            {
                var userSuppliedCertificate = AppState.CertificationAndEndorsementInfo?.UserSuppliedCertificate;
                var clientCertificateLoadStatus = await CertificationService.ClientCertificateLoadStatus();

                if (clientCertificateLoadStatus != null)
                {
                    clientCertificateLoadStatus.UserSuppliedCertificate = userSuppliedCertificate ?? false;
                }

                await AppState.SetPropertyAsync(this, nameof(AppState.CertificationAndEndorsementInfo), clientCertificateLoadStatus);
                await SetCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
            }
        }
    }

    [Parameter]
    public EventCallback OnCertificationCertLoaded { get; set; }
    
    public void Dispose()
    {
        _periodicTimer.Dispose();
    }
}
