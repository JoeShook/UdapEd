@using UdapEd.Shared.Services
@using UdapEd.Shared.Shared

@inject IJSRuntime JSRuntime
@inject IRegisterService RegisterService

<MudAppBar Elevation="3" Style="background-image: linear-gradient( 109.6deg,  rgba(240,240,240,1) 11.2%, rgba(240,240,240,1) 91.1% );">
   <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" Edge="Edge.Start"
                  OnClick="@DrawerToggle" />

    @if (AppState.LaunchContext != null)
    {
        <MudIcon Color="Color.Secondary" Icon="@Icons.Material.TwoTone.PersonPin" />
        <MudText Color="Color.Primary" Class="overflow-hidden">@AppState.LaunchContext.Patient</MudText>
        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.TwoTone.Clear" OnClick="ClearLaunchContext" />
    }
    <MudSpacer />
    
    <div Class="pl-1 pr-1 ml-2 mr-2 d-flex flex-nowrap" style="align-items: center; border-style: solid; border-width: 1px">
        <MudText 
            Color="Color.Primary">Token Status:</MudText>&nbsp;
        <MudText Color="@(AppState.Status is {IsValid: false } ? Color.Error : Color.Success)">@AppState.Status.StatusMessage</MudText>
        @if (AppState.Status.IsValid)
        {
            <MudTooltip Text="Copy Access Token">
            <MudIconButton Icon="@Icons.Material.TwoTone.DeleteForever" Color="Color.Dark" OnClick="DeleteTokens"></MudIconButton>
            </MudTooltip>
            <CopyToClipboard CopyText="@AppState.AccessTokens?.AccessToken" />
        }
    </div>
   
   <MudImage 
       Class="cursor-pointer mud-ripple ma-2" 
       Src="_content/UdapEd.Shared/images/hl7/icon-fhir-32.png" 
       Alt="Fhir Icon" style="height: 36px; width: 36px; margin: 24px"
             @onclick="@GoToIG" />
    <MudImage Class="cursor-pointer mud-ripple" src="_content/UdapEd.Shared/images/udap/UDAP_Ecosystem_Gears.png" Alt="UDAP Icon" style="height: 36px; width: 36px; margin: 24px"
              @onclick="@GoToUdapOrg" />
   <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Dark"
                  Link="https://github.com/udap-tools/udap-dotnet/" Target="_blank" />
@*   $1$ <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Dark" Edge="Edge.End" /> #1# *@
</MudAppBar>

<MudDrawer @bind-Open="_drawerOpen" Elevation="2">
  <MudDrawerHeader>
    <MudTooltip Placement="Placement.End" Style="padding-top: 30px">
        <ChildContent>
            <MudGrid>
                <MudPaper Class="pa-1 ma-1" Elevation="0">
                    <MudText Typo="Typo.h5">UdapEd</MudText>
                    <MudText Typo="Typo.body2">version @Assembly.GetExecutingAssembly().GetName().Version.ToString()</MudText>
                </MudPaper>
                <MudPaper Class="pa-1 ma-1" Elevation="0">
                    <MudImage Class="cursor-pointer mud-ripple" src="_content/UdapEd.Shared/images/UdapEdLogobyDesigner.png" Alt="UDAP Icon" style="height: 36px; width: 36px;"/>
                </MudPaper>
            </MudGrid>

        </ChildContent>
      <TooltipContent>
          <MudText Typo="Typo.h6">UDAP Education Tool</MudText>
          <MudText Typo="Typo.caption">A UDAP client diagnostics tool</MudText>
          <MudIcon Icon="@Icons.Material.Filled.CastForEducation" />
      </TooltipContent>
    </MudTooltip>
  </MudDrawerHeader>
  <MudDivider Style="-o-flex-grow: 0; -webkit-flex-grow: 0; flex-grow: 0;" />
  <NavMenu />
</MudDrawer>


@code {
    
    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    [Inject] IAccessService AccessService { get; set; } = null!;
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task GoToIG()
    {
        await JSRuntime.InvokeVoidAsync("open", "http://hl7.org/fhir/us/udap-security/", "_blank");
    }

    async Task GoToUdapOrg()
    {
        await JSRuntime.InvokeVoidAsync("open", "http://udap.org/", "_blank");
    }

    private async Task ClearLaunchContext()
    {
        await AppState.SetPropertyAsync(this, nameof(AppState.LaunchContext), null);
    }

    private async Task DeleteTokens()
    {
        await AppState.SetPropertyAsync(this, nameof(AppState.AccessTokens), null);
        await AccessService.DeleteAccessToken();

    }
}
