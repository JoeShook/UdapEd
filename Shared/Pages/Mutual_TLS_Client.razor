@page "/mTlsClient"
@using UdapEd.Shared.Services
@inject IMutualTlsService mTlsService
@inject IDialogService DialogService

<ErrorBoundary @ref="_errorBoundary">
<ChildContent>

    <InputFile id="clientCertInput" OnChange="UploadClientFilesAsync" hidden />
    <InputFile id="anchorCertInput" OnChange="UploadAnchorFilesAsync" hidden />

    <MudCard Class="pa-2 ma-2" Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6" Color="Color.Primary">Load mTLS Client</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText>Then client certificate is used to login to mTLS secured FHIR servers</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudFab Class="ma-2"
                    HtmlTag="label"
                    Size="Size.Small"
                    Color="@CertLoadedColor"
                    Icon="@AppState.CertificateIcon"
                    Label="Upload a Client Certificate"
                    Title="Upload Client Certificate"
                    IconSize="Size.Small"
                    for="clientCertInput"/>
            <MudFab HtmlTag="label"
                    Class="ma-2"
                    Size="Size.Small"
                    Color="@CertLoadedColor"
                    Icon="@AppState.CertificateIcon"
                    Label="FhirLabs mTLS Client Certificate"
                    Title="Use Test Client Certificate"
                    IconSize="Size.Small"
                    OnClick="@LoadFhirLabsTestCertificate"/>
        </MudCardActions>
        <MudCardContent>
            @if (AppState.ClientMode == ClientSecureMode.mTLS && (
                     !string.IsNullOrEmpty(AppState.MtlsClientCertificateInfo?.DistinguishedName) ||
                     !string.IsNullOrEmpty(AppState.MtlsClientCertificateInfo?.Thumbprint)))
            {
                <MudText Typo="Typo.body2"><b>Subject:</b>@AppState.MtlsClientCertificateInfo?.DistinguishedName</MudText>
                <MudText Typo="Typo.caption"> <b>Thumbprint (sha1)</b> </MudText>
                <MudText Typo="Typo.body2">@AppState.MtlsClientCertificateInfo?.Thumbprint </MudText>
                <MudText Typo="Typo.body2"><b>Issuer:</b> @AppState.MtlsClientCertificateInfo?.Issuer </MudText>


                @if (AppState.MtlsClientCertificateInfo.CertLoaded == CertLoadedEnum.Expired)
                {
                    <MudAlert Severity="Severity.Error">Certificate Expired</MudAlert>
                }
            }

        </MudCardContent>
    </MudCard>

        <MudCard Class="pa-2 ma-2" Elevation="3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Primary">Load mTLS Trust Anchor</MudText>
                    
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>The anchor is used to validate public mTLS certificates published in a directory</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudFab Class="ma-2"
                        HtmlTag="label"
                        Size="Size.Small"
                        Color="@AnchorLoadedColor"
                        Icon="@AppState.CertificateIcon"
                        Label="Upload a Client Certificate"
                        Title="Upload Client Certificate"
                        IconSize="Size.Small"
                        for="anchorCertInput" />
                <MudFab HtmlTag="label"
                        Class="ma-2"
                        Size="Size.Small"
                        Color="@AnchorLoadedColor"
                        Icon="@AppState.CertificateIcon"
                        Label="FhirLabs mTLS Client Certificate"
                        Title="Use Test Client Certificate"
                        IconSize="Size.Small"
                        OnClick="@LoadmTLSAnchor" />
            </MudCardActions>
            <MudCardContent>
                @if (AppState.ClientMode == ClientSecureMode.mTLS && (
                !string.IsNullOrEmpty(AppState.MtlsAnchorCertificateInfo?.DistinguishedName) ||
                !string.IsNullOrEmpty(AppState.MtlsAnchorCertificateInfo?.Thumbprint)))
                {
                    <MudText Typo="Typo.body2"><b>Subject:</b>@AppState.MtlsAnchorCertificateInfo?.DistinguishedName</MudText>
                    <MudText Typo="Typo.caption"> <b>Thumbprint (sha1)</b> </MudText>
                    <MudText Typo="Typo.body2">@AppState.MtlsAnchorCertificateInfo?.Thumbprint </MudText>
                    <MudText Typo="Typo.body2"><b>Issuer:</b> @AppState.MtlsAnchorCertificateInfo?.Issuer </MudText>


                    @if (AppState.MtlsAnchorCertificateInfo.CertLoaded == CertLoadedEnum.Expired)
                    {
                        <MudAlert Severity="Severity.Error">Certificate Expired</MudAlert>
                    }
                }

            </MudCardContent>
        </MudCard>
</ChildContent>
<ErrorContent Context="ex">
    <pre class="blazor-error-boundary">
            @ex.Message
      </pre>
</ErrorContent>
</ErrorBoundary>

@code {

    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    private ErrorBoundary? _errorBoundary;
    private bool _checkServerSession;

    public Color CertLoadedColor { get; set; } = Color.Error;
    public Color AnchorLoadedColor { get; set; } = Color.Error;

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        var clientCertificateLoadStatus = await mTlsService.ClientCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), clientCertificateLoadStatus);
        await SetClientCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);

        var anchorCertificateLoadStatus = await mTlsService.AnchorCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsAnchorCertificateInfo), anchorCertificateLoadStatus);
        await SetAnchorCertLoadedColor(anchorCertificateLoadStatus?.CertLoaded);
    }


    private async Task SetClientCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
        }

        this.StateHasChanged();
    }

    private async Task SetAnchorCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                AnchorLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.AnchorLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                AnchorLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.AnchorLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                AnchorLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.AnchorLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                AnchorLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.AnchorLoaded), false);
                break;
            default:
                AnchorLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.AnchorLoaded), false);
                break;
        }

        this.StateHasChanged();
    }

    private async Task UploadClientFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await mTlsService.UploadClientCertificate(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certViewModel = await mTlsService.ValidateCertificate(result.Data?.ToString() ?? "");
        await SetClientCertLoadedColor( certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }

    private async Task LoadFhirLabsTestCertificate()
    {
        var certViewModel = await mTlsService.LoadTestCertificate("FhirLabs_mTLS_Client.pfx");
        await SetClientCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }


    private async Task LoadmTLSAnchor()
    {
        var certViewModel = await mTlsService.LoadAnchor();
        await SetAnchorCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsAnchorCertificateInfo), certViewModel);
    }

    private async Task UploadAnchorFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        var certViewModel = await mTlsService.UploadAnchorCertificate(Convert.ToBase64String(certBytes));
        await AppState.SetPropertyAsync(this, nameof(AppState.MtlsAnchorCertificateInfo), certViewModel);
        await SetAnchorCertLoadedColor(certViewModel?.CertLoaded);
    }
}