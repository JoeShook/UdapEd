@page "/mTlsClient"
@using UdapEd.Shared.Services
@inject IMutualTlsService mTlsService
@inject IDialogService DialogService

<ErrorBoundary @ref="_errorBoundary">
<ChildContent>

        <InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />
    <MudGrid Justify="Justify.FlexStart">
<MudItem>
    <MudFab Class="ma-2"
            HtmlTag="label"
            Size="Size.Small"
            Color="@CertLoadedColor"
            Icon="@AppState.CertificateIcon"
            Label="Upload a Client Certificate"
            Title="Upload Client Certificate"
            IconSize="Size.Small"
            for="fileInput"/>

    <MudFab HtmlTag="label"
            Class="ma-2"
            Size="Size.Small"
            Color="@CertLoadedColor"
            Icon="@AppState.CertificateIcon"
            Label="FhirLabs mTLS Client Certificate"
            Title="Use Test Client Certificate"
            IconSize="Size.Small"
            OnClick="@LoadFhirLabsTestCertificate"/>
    
    @if (AppState.ClientMode == ClientSecureMode.mTLS && (
         !string.IsNullOrEmpty(AppState.ClientCertificateInfo?.DistinguishedName) ||
         !string.IsNullOrEmpty(AppState.ClientCertificateInfo?.Thumbprint)))
    {   
        <MudText Typo="Typo.body2"><b>Subject:</b>@AppState.ClientCertificateInfo?.DistinguishedName</MudText>
        <MudText Typo="Typo.caption"> <b>Thumbprint (sha1)</b> </MudText>
        <MudText  Typo="Typo.body2">@AppState.ClientCertificateInfo?.Thumbprint </MudText>
        <MudText Typo="Typo.body2"><b>Issuer:</b> @AppState.ClientCertificateInfo?.Issuer </MudText>
       

        @if (AppState.ClientCertificateInfo.CertLoaded == CertLoadedEnum.Expired)
        {
            <MudAlert Severity="Severity.Error">Certificate Expired</MudAlert>
        }
    }

</MudItem>
</MudGrid>
       
</ChildContent>
<ErrorContent Context="ex">
    <pre class="blazor-error-boundary">
            @ex.Message
      </pre>
</ErrorContent>
</ErrorBoundary>

@code {

    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    private ErrorBoundary? _errorBoundary;
    private bool _checkServerSession;

    public Color CertLoadedColor { get; set; } = Color.Error;

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        var clientCertificateLoadStatus = await mTlsService.ClientCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), clientCertificateLoadStatus);
        await SetCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
        
    }


    private async Task SetCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Expired:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
        }

        this.StateHasChanged();
    }


    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await mTlsService.UploadClientCertificate(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certViewModel = await mTlsService.ValidateCertificate(result.Data?.ToString() ?? "");
        await SetCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }

    private async Task LoadFhirLabsTestCertificate()
    {
        var certViewModel = await mTlsService.LoadTestCertificate("FhirLabs_mTLS_Client.pfx");
        await SetCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), certViewModel);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientMode), ClientSecureMode.mTLS);
    }
}
