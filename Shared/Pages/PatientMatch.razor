@page "/patientMatch"
@using Hl7.Fhir.Model
@using Hl7.Fhir.Serialization
@using UdapEd.Shared.Extensions
@using Task = System.Threading.Tasks.Task
@using System.Net
@using Microsoft.IdentityModel.Tokens
@using UdapEd.Shared
@using UdapEd.Shared.Services
@using UdapEd.Shared.Shared
@using Address = Hl7.Fhir.Model.Address

<MudCard Elevation="3" Style="margin-top: 10px">
  <MudForm Model="_model" @ref="_form" />
  <MudCardContent>
    <MudGrid Justify="Justify.FlexStart">
        <MudItem md="4" sm="6" xs="12">
            <MudText Color="Color.Primary">Access Token:</MudText>
            <MudText Color="@(AppState.Status is {IsValid: false }
                                ? Color.Error : Color.Success)">@AppState.AccessTokens?.AccessToken?.TrimForDisplay(30, "...")</MudText>
        </MudItem>

        <MudItem md="4" sm="6" xs="12">
            <MudGrid>
                <MudTextField Label="Base FHIR Url" T="string" @bind-Value="BaseUrlOverride"></MudTextField>
                <MudFab StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="ChangeBaseUrl"></MudFab>
            </MudGrid>
        </MudItem>

    </MudGrid>
    <MudGrid>
      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Family"
                      For="@(() => _model.Family)"
                      Label="Family (last)" 
                      TextChanged="BuildMatch" />
      </MudItem>
      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Given"
                      For="@(() => _model.Given)"
                      Label="Given (first)"
                      TextChanged="BuildMatch" />
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
          <MudSelect Label="Gender"
                   T="string"
                   SelectedValuesChanged="OnSelectedGenderChanged"
                   HelperText="AdministrativeGender"
                   Clearable="true">

                    @foreach (AdministrativeGender? item in Enum.GetValues(typeof(AdministrativeGender)))
                    {
                        <MudSelectItem Value="@item.ToString()">@item.ToString()</MudSelectItem>
                    }
        </MudSelect>
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
        <MudDatePicker @bind-Date="_model.BirthDate"
                       Label="yyyy-MM-dd"
                       Editable="true"
                       Mask="@(new DateMask("0000-00-00"))"
                       DateFormat="yyyy-MM-dd"
                       Placeholder="ISO Date"
                       Clearable="true"
                       TextChanged="BuildMatch" />
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Identifier"
                      For="@(() => _model.Identifier)"
                      Label="Fhir Identifier"
                      TextChanged="BuildMatch" />
      </MudItem>
      
      <MudItem md="4" sm="6" xs="12">
          <MudFab Icon="@Icons.Material.Filled.Add"
                  Color="Color.Inherit"
                  @onclick="AddAddress"
                  Label="Add Address" />
      </MudItem>

      
      

      <MudItem xs="12">

          <MudTable Dense="true"
                    ReadOnly="false"
                    Items="@_model.AddressList"
                    Striped="true"
                    CanCancelEdit="@true"
                    OnCommitEditClick="BuildMatch">
              <HeaderContent>
                  <MudTh>Line 1</MudTh>
                  <MudTh>City</MudTh>
                  <MudTh>State</MudTh>
                  <MudTh>Postal Code</MudTh>
              </HeaderContent>
              <RowTemplate>
                  <MudTd DataLabel="Address Line 1">@context.Line1</MudTd>
                  <MudTd DataLabel="City">@context.City</MudTd>
                  <MudTd DataLabel="State">@context.State</MudTd>
                  <MudTd DataLabel="Postal Code">@context.PostalCode</MudTd>
              </RowTemplate>
              <RowEditingTemplate>
                  <MudTd DataLabel="Address Line 1">
                      <MudTextField @bind-Value="@context.Line1"/>
                  </MudTd>
                  <MudTd DataLabel="City">
                      <MudTextField @bind-Value="@context.City"/>
                  </MudTd>
                  <MudTd DataLabel="State">
                      <MudTextField @bind-Value="@context.State" Required/>
                  </MudTd>
                  <MudTd DataLabel="Postal Code">
                      <MudTextField @bind-Value="@context.PostalCode"/>
                  </MudTd>
              </RowEditingTemplate>
          </MudTable>
      </MudItem>

    </MudGrid>
    <MudCardActions>
      <MudButton Class="mt-3"
                 Color="Color.Primary"
                 ButtonType="ButtonType.Button"
                 Variant="Variant.Text"
                 OnClick="Cancel">Reset</MudButton>
    </MudCardActions>
  </MudCardContent>
</MudCard>

@if (!string.IsNullOrEmpty(_parametersJson))
{
    <MudCard Elevation="3" Style="margin-top: 10px">
      <MudCardContent>
        <pre>POST @($"{AppState.BaseUrl}/Patient/$match")</pre><br />
        <InputTextArea Class="@ValidPatientResourceStyle"
                   rows="@(_parametersJson.Count(s => s == '\n') + 1)"
                   @bind-Value="_parametersJson"
                   @onfocusout="PersistSoftwareStatement" />
      </MudCardContent>

      <MudCardActions>
        <MudButton Class="mt-3"
               Color="Color.Primary"
               ButtonType="ButtonType.Button"
               Variant="Variant.Text"
               OnClick="Match">Post Match</MudButton>
      </MudCardActions>
    </MudCard>
}


@if (_entries != null || _outComeMessage != null)
{

    <MudCard Elevation="3" Style="margin-top: 10px">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Patient List">
                <MudCardContent>
                    <MudTable @ref="_table"
                              T="Bundle.EntryComponent"
                              Items="@_entries"
                              MultiSelection="true"
                              Dense="@false"
                              Hover="@true"
                              ReadOnly="@true"
                              SortLabel="Name"
                              CommitEditTooltip="Commit Edit"
                              IsEditRowSwitchingBlocked="@true"
                              ApplyButtonPosition="@TableApplyButtonPosition.Start"
                              OnRowClick="@OnRowClick">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>BirthDate</MudTh>
                            <MudTh>Id</MudTh>
                            <MudTh>Identifier</MudTh>
                            <MudTh>Score / Grade</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@(new MarkupString(string.Join("<br/> ", ((Patient)context.Resource).Name.Select(hn => $"{hn.Given.First()}, {hn.Family}"))))</MudTd>
                            <MudTd DataLabel="BirthDate">@((Patient)context.Resource).BirthDate</MudTd>
                            <MudTd DataLabel="Id">@((Patient)context.Resource).Id</MudTd>
                            <MudTd DataLabel="Identifier">@(new MarkupString(string.Join("<br/> ", ((Patient)context.Resource).Identifier.Select(identifier => $"{identifier.System}|{identifier.Value}"))))</MudTd>
                            <MudTd DataLabel="Score / Grade">@(FormatScoreAndGrade(context))</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] { 50, 100 }" />
                        </PagerContent>

                    </MudTable>

                    @if (_outComeMessage != null)
                    {
                        <MudAlert Severity="Severity.Error">@(new MarkupString(_outComeMessage))</MudAlert>
                    }
                </MudCardContent>
            </MudTabPanel>
            <MudTabPanel Text="Bundle Response">
                <InputTextArea Class="@ValidPatientResourceStyle"
                               rows="@(_matchResultRaw?.Count(s => s == '\n') + 1)"
                               @bind-Value="_matchResultRaw"
                               @onfocusout="PersistSoftwareStatement" />
            </MudTabPanel>
        </MudTabs>
    </MudCard>

    @if (!string.IsNullOrEmpty(_selectedItemText))
    {
        <MudCard Elevation="3" Style="margin: 10px">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Patient Resource</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <pre>@_selectedItemText</pre>
            </MudCardContent>
        </MudCard>
    }
}




@code {

    MudForm _form = null!;
    private MudTable<Bundle.EntryComponent> _table = null!;
    PatientMatchModel _model = new(); //starting point for building $match fields
    List<Bundle.EntryComponent?>? _entries;
    string? _matchResultRaw;
    string? _outComeMessage;
    private string _parametersJson = string.Empty;
    private string _selectedItemText = string.Empty;
    
    [CascadingParameter]
    public CascadingAppState AppState { get; set; } = null!;

    [Inject] IFhirService FhirService { get; set; } = null!;
    [Inject] IDiscoveryService DiscoveryService { get; set; } = null!;

    private const string ValidStyle = "pre udap-indent-1";
    private const string InvalidStyle = "pre udap-indent-1 jwt-invalid";
    

    private string? _baseUrlOverride = string.Empty;

    private string? BaseUrlOverride
    {
        get
        {
            if (string.IsNullOrEmpty(_baseUrlOverride))
            {
                _baseUrlOverride = AppState.BaseUrl;
            }
            return _baseUrlOverride;
        }

        set => _baseUrlOverride = value;
    }
    private async Task ChangeBaseUrl()
    {
        if (!string.IsNullOrEmpty(_baseUrlOverride))
        {
            await AppState.SetPropertyAsync(this, nameof(AppState.BaseUrl), _baseUrlOverride);
            await DiscoveryService.SetBaseFhirUrl(_baseUrlOverride);
        }
    }

    public string ValidPatientResourceStyle { get; set; } = ValidStyle;

    private void PersistSoftwareStatement()
    {
        try
        {
            new FhirJsonParser().Parse<Parameters>(_parametersJson);
            ValidPatientResourceStyle = ValidStyle;
        }
        catch
        {
            ValidPatientResourceStyle = InvalidStyle;
        }
    }

    private void Cancel()
    {
        _model = new();
    }

    void OnRowClick(TableRowClickEventArgs<Bundle.EntryComponent> args)
    {
        if (args.Row.IsChecked)
        {
            _selectedItemText = new FhirJsonSerializer(new SerializerSettings { Pretty = true })
                .SerializeToString(args.Item);
        }
        else
        {
            _selectedItemText = string.Empty;
        }
    }

    private async Task BuildMatch()
    {
        var patient = new Patient();

        if (!string.IsNullOrEmpty(_model.Identifier))
        {
            var parts = _model.Identifier.Split("|");

            if (parts.Length == 2)
            {
                patient.Identifier.Add(new Identifier(parts.First(), parts.Last()));
            }
            else
            {
                patient.Identifier.Add(new Identifier() { Value = parts.First() });
            }
        }

        if (!string.IsNullOrEmpty(_model.Family) ||
            !string.IsNullOrEmpty(_model.Given))
        {
            var humanName = new HumanName();

            if (!string.IsNullOrEmpty(_model.Family))
            {
                humanName.Family = _model.Family;
            }

            if (!string.IsNullOrEmpty(_model.Given))
            {
                humanName.Given = new List<string> { _model.Given };
            }

            patient.Name.Add(humanName);
        }

        patient.Gender = _model.Gender;

        if (_model.BirthDate.HasValue)
        {
            patient.BirthDate = _model.BirthDate.Value.ToString("yyyy-MM-dd");
        }

        if (_model.AddressList != null && _model.AddressList.Any())
        {
            var address = new Address();
            var modelAddress = _model.AddressList.First();

            var lines = new List<string>();
            if (!modelAddress.Line1.IsNullOrEmpty())
            {
                lines.Add(modelAddress.Line1);
                address.Line = lines;
            }
            
            if (!modelAddress.City.IsNullOrEmpty())
            {
                address.City = modelAddress.City;
            }

            if (!modelAddress.State.IsNullOrEmpty())
            {
                address.State = modelAddress.State;
            }

            if (!modelAddress.PostalCode.IsNullOrEmpty())
            {
                address.PostalCode = modelAddress.PostalCode;
            }

            patient.Address.Add(address);
            
        }

        // patient.Telecom = new List<ContactPoint>();
        // patient.Telecom.Add(new ContactPoint(ContactPoint.ContactPointSystem.Phone, ContactPoint.ContactPointUse.Mobile, "+1 (555) 777-1234"));

        var parameters = new Parameters();
        parameters.Add(UdapEdConstants.PatientMatch.InParameterNames.RESOURCE, patient);

        _parametersJson = await new FhirJsonSerializer(new SerializerSettings { Pretty = true })
            .SerializeToStringAsync(parameters);
    }
    
    private async Task OnSelectedGenderChanged(IEnumerable<string> obj)
    {
        var gender = obj.FirstOrDefault();
        
        if (gender != null)
        {
            _model.Gender = (AdministrativeGender)Enum.Parse(typeof(AdministrativeGender), gender);
            await BuildMatch();
        }
    }

    private async Task Match()
    {
        _selectedItemText = string.Empty;
        _entries = null;
        StateHasChanged();
        await Task.Delay(100);

        if (AppState.BaseUrl != null)
        {
            var result = await FhirService.MatchPatient(_parametersJson);

            if (result.UnAuthorized)
            {
                _outComeMessage = HttpStatusCode.Unauthorized.ToString();
            }
            else if (result.HttpStatusCode == HttpStatusCode.PreconditionFailed)
            {
                await DiscoveryService.SetBaseFhirUrl(AppState.BaseUrl);
                _outComeMessage = "BaseUrl was reset.  Try again";
            }

            else if (result.OperationOutCome != null)
            {
                _entries = null;
                string? errorMessage = null;

                foreach (var issue in result.OperationOutCome.Issue)
                {
                    errorMessage += $"Error:: Details: {issue.Details?.Text}.<br/>"
                                    + $"Diagnostics: {issue.Diagnostics}.<br/>"
                                    + $"IssueType: {issue.Code}.<br/>";
                }

                _outComeMessage = errorMessage;
            }
            else
            {
                _outComeMessage = null;

                if (result.HttpStatusCode != null)
                {
                    _matchResultRaw = $"HTTP/{result.Version} {(int)result.HttpStatusCode} {result.HttpStatusCode}";
                    _matchResultRaw += Environment.NewLine + Environment.NewLine;
                }

                _matchResultRaw += await new FhirJsonSerializer(new SerializerSettings { Pretty = true })
                    .SerializeToStringAsync(result.Result);

                // var joe = $"{((Bundle.SearchComponent)result.Result?.Entry.SingleOrDefault().Search).Score.Value}/" +
                //               $"{((Code)((Bundle.SearchComponent)result.Result.Entry.SingleOrDefault().Search)
                //                   .Extension.SingleOrDefault(e => e.Url == \"http://hl7.org/fhir/StructureDefinition/match-grade\").Value).Value}";

                _entries = result.Result?.Entry
                    .Where(e => e.Resource is Patient)
                    .Select(e => e)
                    .ToList();
            }
        }
    }

    private string FormatScoreAndGrade(Bundle.EntryComponent entry)
    {
        var searchResult = entry.Search;
        var score = searchResult.Score ?? 0;
        var code = searchResult.Extension.SingleOrDefault(e => e.Url == "http://hl7.org/fhir/StructureDefinition/match-grade")?.Value as Code;
        var grade = code?.Value;

        return $"{score} / {grade}";
    }

    private void AddAddress()
    {
        if (_model.AddressList == null)
        {
            _model.AddressList = new List<Model.Address>();
        }

        _model.AddressList.Add(new Model.Address());
    }

}
