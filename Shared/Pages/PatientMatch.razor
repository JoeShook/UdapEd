@page "/patientMatch"
@using UdapEd.Shared.Extensions
@using Task = System.Threading.Tasks.Task
@using Hl7.Fhir.Model


<MudCard Elevation="3" Style="margin-top: 10px">
  <MudForm Model="_model" @ref="_form" />
  <MudCardContent>
    <MudGrid Justify="Justify.FlexStart">
        <MudItem md="4" sm="6" xs="12">
            <MudText Color="Color.Primary">Access Token:</MudText>
            <MudText Color="@(AppState.Status is {IsValid: false }
                                ? Color.Error : Color.Success)">@AppState.AccessTokens?.AccessToken?.TrimForDisplay(30, "...")</MudText>
        </MudItem>

        <MudItem md="4" sm="6" xs="12">
            <MudGrid>
                <MudTextField Label="Base FHIR Url" T="string" @bind-Value="BaseUrlOverride"></MudTextField>
                <MudFab StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="ChangeBaseUrl"></MudFab>
            </MudGrid>
        </MudItem>

    </MudGrid>
    <MudGrid>
      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Family"
                      For="@(() => _model.Family)"
                      Label="Family (last)" 
                      TextChanged="BuildMatch" />
      </MudItem>
      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Given"
                      For="@(() => _model.Given)"
                      Label="Given (first)"
                      TextChanged="BuildMatch" />
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
          <MudSelect Label="Gender"
                   T="string"
                   SelectedValuesChanged="OnSelectedGenderChanged"
                   HelperText="AdministrativeGender"
                   Clearable="true">

                    @foreach (AdministrativeGender? item in Enum.GetValues(typeof(AdministrativeGender)))
                    {
                        <MudSelectItem Value="@item.ToString()">@item.ToString()</MudSelectItem>
                    }
        </MudSelect>
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
        <MudDatePicker @bind-Date="_model.BirthDate"
                       Label="yyyy-MM-dd"
                       Editable="true"
                       Mask="@(new DateMask("0000-00-00"))"
                       DateFormat="yyyy-MM-dd"
                       Placeholder="ISO Date"
                       Clearable="true"
                       TextChanged="BuildMatch" />
      </MudItem>

      <MudItem md="4" sm="6" xs="12">
        <MudTextField @bind-Value="_model.Identifier"
                      For="@(() => _model.Identifier)"
                      Label="Fhir Identifier"
                      TextChanged="BuildMatch" />
      </MudItem>
      
      <MudItem md="4" sm="6" xs="12">
          <MudFab Icon="@Icons.Material.Filled.Add"
                  Color="Color.Inherit"
                  @onclick="AddAddress"
                  Label="Add Address" />
      </MudItem>

            @* <MudItem md="4" sm="6" xs="12"> *@
            @*     <MudFab Icon="@Icons.Material.Filled.Add" *@
            @*             Color="Color.Inherit" *@
            @*             @onclick="AddContactSystem" *@
            @*             Label="Add Contact System" /> *@
            @* </MudItem> *@
      

      <MudItem xs="12">

          <MudTable Dense="true"
                    ReadOnly="false"
                    Items="@_model.AddressList"
                    Striped="true"
                    CanCancelEdit="@true"
                    OnCommitEditClick="BuildMatch">
              <HeaderContent>
                  <MudTh>Line 1</MudTh>
                  <MudTh>City</MudTh>
                  <MudTh>State</MudTh>
                  <MudTh>Postal Code</MudTh>
              </HeaderContent>
              <RowTemplate>
                  <MudTd DataLabel="Address Line 1">@context.Line1</MudTd>
                  <MudTd DataLabel="City">@context.City</MudTd>
                  <MudTd DataLabel="State">@context.State</MudTd>
                  <MudTd DataLabel="Postal Code">@context.PostalCode</MudTd>
              </RowTemplate>
              <RowEditingTemplate>
                  <MudTd DataLabel="Address Line 1">
                      <MudTextField @bind-Value="@context.Line1"/>
                  </MudTd>
                  <MudTd DataLabel="City">
                      <MudTextField @bind-Value="@context.City"/>
                  </MudTd>
                  <MudTd DataLabel="State">
                      <MudTextField @bind-Value="@context.State" Required/>
                  </MudTd>
                  <MudTd DataLabel="Postal Code">
                      <MudTextField @bind-Value="@context.PostalCode"/>
                  </MudTd>
              </RowEditingTemplate>
          </MudTable>
      </MudItem>

    </MudGrid>
    <MudCardActions>
      <MudButton Class="mt-3"
                 Color="Color.Primary"
                 ButtonType="ButtonType.Button"
                 Variant="Variant.Text"
                 OnClick="Cancel">Reset</MudButton>
    </MudCardActions>
  </MudCardContent>
</MudCard>

@if (!string.IsNullOrEmpty(_parametersJson))
{
    <MudCard Elevation="3" Style="margin-top: 10px">
      <MudCardContent>
        <pre>POST @($"{AppState.BaseUrl}/Patient/$match")</pre><br />
        <InputTextArea Class="@ValidPatientResourceStyle"
                   rows="@(_parametersJson.Count(s => s == '\n') + 1)"
                   @bind-Value="_parametersJson"
                   @onfocusout="PersistSoftwareStatement" />
      </MudCardContent>

      <MudCardActions>
        <MudButton Class="mt-3"
               Color="Color.Primary"
               ButtonType="ButtonType.Button"
               Variant="Variant.Text"
               OnClick="Match">Post Match</MudButton>
      </MudCardActions>
    </MudCard>
}


@if (_entries != null || _outComeMessage != null)
{

    <MudCard Elevation="3" Style="margin-top: 10px">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Patient List">
                <MudCardContent>
                    <MudTable @ref="_table"
                              T="Hl7.Fhir.Model.Bundle.EntryComponent"
                              Items="@_entries"
                              MultiSelection="true"
                              Dense="@false"
                              Hover="@true"
                              ReadOnly="@true"
                              SortLabel="Name"
                              CommitEditTooltip="Commit Edit"
                              IsEditRowSwitchingBlocked="@true"
                              ApplyButtonPosition="@TableApplyButtonPosition.Start"
                              OnRowClick="@OnRowClick">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>BirthDate</MudTh>
                            <MudTh>Id</MudTh>
                            <MudTh>Identifier</MudTh>
                            <MudTh>Score / Grade</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@(new MarkupString(string.Join("<br/> ", ((Patient)context.Resource).Name.Select(hn => $"{hn.Given.First()}, {hn.Family}"))))</MudTd>
                            <MudTd DataLabel="BirthDate">@((Patient)context.Resource).BirthDate</MudTd>
                            <MudTd DataLabel="Id">@((Patient)context.Resource).Id</MudTd>
                            <MudTd DataLabel="Identifier">@(new MarkupString(string.Join("<br/> ", ((Patient)context.Resource).Identifier.Select(identifier => $"{identifier.System}|{identifier.Value}"))))</MudTd>
                            <MudTd DataLabel="Score / Grade">@(FormatScoreAndGrade(context))</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] { 50, 100 }" />
                        </PagerContent>

                    </MudTable>

                    @if (_outComeMessage != null)
                    {
                        <MudAlert Severity="Severity.Error">@(new MarkupString(_outComeMessage))</MudAlert>
                    }
                </MudCardContent>
            </MudTabPanel>
            <MudTabPanel Text="Bundle Response">
                <InputTextArea Class="@ValidPatientResourceStyle"
                               rows="@(_matchResultRaw?.Count(s => s == '\n') + 1)"
                               @bind-Value="_matchResultRaw"
                               @onfocusout="PersistSoftwareStatement" />
            </MudTabPanel>
        </MudTabs>
    </MudCard>

    @if (!string.IsNullOrEmpty(_selectedItemText))
    {
        <MudCard Elevation="3" Style="margin: 10px">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Patient Resource</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <pre>@_selectedItemText</pre>
            </MudCardContent>
        </MudCard>
    }
}