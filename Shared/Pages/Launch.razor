@page "/launch"
@using Microsoft.AspNetCore.WebUtilities
@using UdapEd.Shared.Services
@using UdapEd.Shared.Services.Http
@using Microsoft.IdentityModel.Tokens
@using UdapEd.Shared.Extensions
@using UdapEd.Shared.Model.Smart

<MudCard Elevation="3" Style="margin-top: 10px">
    
    <MudCardContent>
        <MudGrid Justify="Justify.FlexStart">
            <MudItem  xs="12">
                <MudIcon  Color="Color.Primary" Size="Size.Large" Icon="@Icons.Material.Filled.FindInPage"></MudIcon>
                <MudText Class="d-inline mud-typography-h5" >@GetMetadata()</MudText>
            </MudItem>

        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [CascadingParameter] public CascadingAppState AppState { get; set; } = null!;

    [Inject] NavigationManager NavManager { get; set; } = null!;

    [Inject] IDiscoveryService MetadataService { get; set; } = null!;

    private async Task<string> GetMetadata()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (!string.IsNullOrEmpty(uri.Query))
        {
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            var iss = queryParams.GetValueOrDefault("iss");
            var launch = queryParams.GetValueOrDefault("launch");

            if (iss.IsNullOrEmpty())
            {
                throw new MissingFieldException("Missing iis parameter");
            }

            if (launch.IsNullOrEmpty())
            {
                throw new MissingFieldException("Missing launch parameter");
            }

            var capabilityStatement = await MetadataService.GetCapabilityStatement(iss!, default);
            
            if(capabilityStatement == null)
            {
                throw new MissingFieldException($"Missing CapabilityStatement at {iss}");
            }
            
            var oAuthUris = capabilityStatement.GetOAuthUris();

            // if (oAuthUris.Authorization.IsNullOrEmpty() || oAuthUris.Token.IsNullOrEmpty())
            // {
            //     var smartConfig = await MetadataService.GetSmartConfig(iss!, default);
            //     oAuthUris = smartConfig.GetOAuthUris();
            // }

            var redirectUri = NavManager.BaseUri;
            var state = Guid.NewGuid().ToString();

            // find client registered for the launching EHR
            var clients = AppState.ClientRegistrations?.Registrations.Where(r => r.Value?.ResourceServer == iss);
            //Pick your client
            //first one for now.
            var client = clients?.FirstOrDefault().Value;

            var builder = new QueryStringBuilder(oAuthUris.Authorization)
                .Add("response_type", "code")
                .Add("client_id", client.ClientId)
                .Add("scope", client.Scope)
                .Add("redirect_uri", redirectUri)
                .Add("aud", iss!)
                .Add("launch", launch!)
                .Add("state", state);

            var session = new SmartSession(state)
                {
                    ServiceUri = iss,
                    RedirectUri = redirectUri,
                    TokenUri = oAuthUris.Token,
                    CapabilityStatement = capabilityStatement,
                    AuthCodeUrlWithQueryString = builder.Build()
                };
            

            var loginCallbackResult = new LoginCallBackResult
            {
                Code = queryParams.GetValueOrDefault("iss"),
                Scope = queryParams.GetValueOrDefault("scope"),
                State = queryParams.GetValueOrDefault("state"),
                SessionState = queryParams.GetValueOrDefault("session_state"),
                Issuer = queryParams.GetValueOrDefault("iss")
            };

            AppState.SetProperty(this, nameof(AppState.SmartSession), session, true, false);
        }

        return uri.Query.Replace("&", "&\r\n");


        
    }
}
