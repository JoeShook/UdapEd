@page "/patientSearch"
@using Hl7.Fhir.Model
@using UdapEd.Shared.Components
@using Task = System.Threading.Tasks.Task
@using UdapEd.Shared.Extensions


<ErrorBoundary @ref="ErrorBoundary">
    <ChildContent>
        <MudCard Elevation="3" Style="margin-top: 10px">
            <MudForm Model="_model" @ref="form" />
            <MudCardContent>
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem md="4" sm="6" xs="12">
                        <MudText Color="Color.Primary">Client Secure Mode:</MudText>
                        @if (AppState.ClientMode == ClientSecureMode.UDAP)
                        {
                            <MudText Color="@(AppState.Status is {IsValid: false }? Color.Error : Color.Success)">@Enum.GetName(typeof(ClientSecureMode), AppState.ClientMode)</MudText>
                        }
                        else
                        {
                            <MudText Color="Color.Success">@Enum.GetName(typeof(ClientSecureMode), AppState.ClientMode)</MudText>
                        }
                    </MudItem>

                    <MudItem md="4" sm="6" xs="12">
                        <MudGrid>
                            <MudTextField Label="Base FHIR Url" T="string" @bind-Value="BaseUrlOverride"></MudTextField>
                            <MudFab StartIcon="@Icons.Material.TwoTone.Save" Size="Size.Small" OnClick="ChangeBaseUrl"></MudFab>
                        </MudGrid>
                    </MudItem>

                </MudGrid>
                <MudGrid>
                    <MudItem md="4" sm="6" xs="12">
                        <MudTextField @bind-Value="_model.Family"
                                      For="@(() => _model.Family)"
                                      Label="Family (last)" />
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudTextField @bind-Value="_model.Given"
                                      For="@(() => _model.Given)"
                                      Label="Given (first)" />
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudTextField @bind-Value="_model.Name"
                                      For="@(() => _model.Name)"
                                      Label="first, last or middle" />
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudDatePicker @bind-Date="_model.BirthDate"
                                       Label="yyyy-MM-dd"
                                       Editable="true"
                                       Mask="@(new DateMask("0000-00-00"))"
                                       DateFormat="yyyy-MM-dd"
                                       Placeholder="ISO Date" />
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudTextField @bind-Value="_model.Id"
                                      For="@(() => _model.Id)"
                                      Label="Resource Id" />
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudTextField @bind-Value="_model.Identifier"
                                      For="@(() => _model.Identifier)"
                                      Label="Fhir Identifier" />
                    </MudItem>
                </MudGrid>
                <MudCardActions>
                    <MudButton Class="mt-3"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Text"
                               OnClick="Search">Search</MudButton>
                    <MudButton Class="mt-3"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Text"
                               Disabled="@(string.IsNullOrEmpty(_model.Id))"
                               OnClick="Get">Get</MudButton>
                    <MudButton Class="mt-3"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Text"
                               OnClick="Cancel">Cancel</MudButton>
                </MudCardActions>
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="3" Style="margin-top: 10px">
            <MudCardContent>
                <CascadingValue Value="CurrentBundle">
                    <MudTable @ref="PatientTable"
                              @bind-RowsPerPage="AppState.PatientSearchPref.RowsPerPage"
                              T="Patient"
                              ServerData="Reload"
                              MultiSelection="false"
                              Dense="@false"
                              Hover="@true"
                              ReadOnly="@true"
                              SortLabel="Name"
                              CommitEditTooltip="Commit Edit"
                              IsEditRowSwitchingBlocked="@true"
                              ApplyButtonPosition="@TableApplyButtonPosition.Start"
                              OnRowClick="@OnRowClick">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>BirthDate</MudTh>
                            <MudTh>Id</MudTh>
                            <MudTh>Identifier</MudTh>
                            <MudTh/>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@(new MarkupString(string.Join("<br/> ", context.Name.Select(hn => $"{hn.Given.First()}, {hn.Family}"))))</MudTd>
                            <MudTd DataLabel="BirthDate">@context.BirthDate</MudTd>
                            <MudTd DataLabel="Id">@context.Id</MudTd>
                            <MudTd DataLabel="Identifier">@(new MarkupString(string.Join("<br/> ", context.Identifier.Select(identifier => $"{identifier.System}|{identifier.Value}"))))</MudTd>
                            <MudTd>
                                
                                <MudTooltip Text="Set Context">
                                    <MudMenu AriaLabel="Set Context" Icon="@Icons.Material.Outlined.PersonPin" Color="Color.Secondary" Variant="Variant.Text">
                                        <MudMenuItem OnClick="@(() => SetPatientContext(context))">Set Patient Context</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => SetRelatedPersonContext(context))">Set Related Person Context</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => SetPersonContext(context))">Set Person Context</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => SetLaunchContext(context))">Set Launch Context</MudMenuItem>
                                    </MudMenu>
                                </MudTooltip>

                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <FhirTablePager PageSizeOptions="new[] { 5, 10, 20, 50, 100 }" @ref="_pager" />
                        </PagerContent>

                    </MudTable>
                </CascadingValue>

                @if (_outComeMessage != null)
                {
                    <MudAlert Severity="Severity.Error"><pre>@(new MarkupString(_outComeMessage))</pre></MudAlert>
                }
            </MudCardContent>
        </MudCard>


        @if (!string.IsNullOrEmpty(_selectedItemText))
        {
            <MudCard Elevation="3" Style="margin-top: 10px">
                <MudCardContent>
                    <pre>@_selectedItemText</pre>
                </MudCardContent>
            </MudCard>
        }

    </ChildContent>
    <ErrorContent Context="ex">
        @{
            Console.Write(ex.Message);
        }
        <pre class="blazor-error-boundary">
            @ex.Message
      </pre>
    </ErrorContent>
</ErrorBoundary>